-- @nsURI UML=http://www.eclipse.org/uml2/3.0.0/UML
-- @path JAVA=/models17.tutorial.java2uml/metamodels/JAVA.ecore

module java2uml;
create CD : UML from CM : JAVA;

helper def : allClasses : Sequence(JAVA!ClassDeclaration) = JAVA!ClassDeclaration.allInstances();

helper context JAVA!Package def : allClasses : Sequence(JAVA!ClassDeclaration) = 
	self.ownedElements -> select(e | e.proxy = false) -> select(e | e.oclIsTypeOf(JAVA!ClassDeclaration));

-- @force-declared-return-type
helper context JAVA!ClassDeclaration def : getSuperClass : JAVA!ClassDeclaration =
	 if self.superClass.oclIsUndefined() 
	 then OclUndefined 
	 else 
		if ( self.superClass.type.oclIsKindOf(JAVA!ClassDeclaration)) 
		then self.superClass.type 
		else OclUndefined
		endif
	 endif;

helper context JAVA!AbstractTypeDeclaration def : getInterfaces : Sequence(JAVA!InterfaceDeclaration) =
	 self.superInterfaces->collect(i | i.type)->select(t | t.oclIsKindOf(JAVA!InterfaceDeclaration));

rule Class2Class {
	from s1 : JAVA!ClassDeclaration
	to t1 : UML!Class (
		name <- s1.name,	
		
		
		superClass <- s1.getSuperClass,
		-- Solution:
		-- generalization <- thisModule.createGeneralizationForClass(s1, s1.getSuperClass),
			
		superClass <- s1.getInterfaces
		-- generalization <- s1.getInterfaces->collect(i | thisModule.createGeneralizationForInterface(s1, i))
	)
}

rule Interface2Class {
	from s1 : JAVA!InterfaceDeclaration
	to t1 : UML!Class (
		name <- s1.name,	

		superClass <- s1.getInterfaces
		-- generalization <- s1.getInterfaces->collect(i | thisModule.createGeneralizationForInterface(s1, i))
	)
}

--lazy rule createGeneralizationForClass {
--   from c : JAVA!ClassDeclaration, c1 : JAVA!ClassDeclaration
--     to g : UML!Generalization (
--		specific <- c,
--		general <- c1
--	)
--}
--
--lazy rule createGeneralizationForInterface {
--   from specific : JAVA!ClassDeclaration, general : JAVA!InterfaceDeclaration
--   to g : UML!Generalization (
--	 specific <- specific,
--	 general <- general
--   )
--}
	

